# This is an example configuration for fractalmake.
# From a '#' character to the end of the line is a comment.

# When run using this configuration, the result is a zoomed in image of a
# small piece of the Mandelbrot set.

# Note that when running the main driver program 'fractalmake' all options
# seen here are required. All of the functionality needed to implement
# some other scheme is exposed, however.

# Option: colors
# Syntax: colors: { color [, color] }
#         color: { integer, { integer, integer, integer } }
#
# This option specifies the color scale that will be used to draw the fractal
# image. The first integer in each color specification is the number of 
# iterations to which that color corresponds; the three integers in the inner
# brackets specify the color in RGB form. These numbers must be in the
# interval [0, 255]. Color values are interpolated between the specified
# points using a cubic spline.
#
# The color scale needs to include a color for 0 iteraions and must at least
# extend to 'maxiters' iterations (see function specification). You'll get
# an exception from the spline implementation otherwise.
colors:
{
    { 1200, { 255, 255, 255 } },
    { 120,  { 255, 238, 0   } },
    { 60,   { 155, 48,  48  } },
    { 24,   { 20,  0,   66  } },
    { 0,     { 221, 170, 220 } }
}

# Option: domain
# Syntax: domain: { point, point, integer, integer }
#         point: { real, imag }
#
# The first point specified is the lower left corner of the domain in the
# complex plane. The second point is the upper right. The two integers give
# respectively the number of pixels in the real and imaginary directions.
# Complex numbers are always specified in this format in the config file.
domain:
{
    { -0.6528, 0.4747 },
    { -0.6471, 0.4804 }, # Here is another comment
    5000, 5000
}

# Option: num_threads
# Self explanatory I think. Set the number of threads the program will use
# during computation.
num_threads: 4

# Option: output
# This is the name of the image file that the fractal will be saved to.
# Output is an uncompressed bitmap unless I get around to converting the
# code to use libpng.
#
# A special output specification is "-", which will send the image to stdout
# instead of a file. I use this to pipe through ImageMagick and convert to
# some other more space-efficient image format.
output: "mandelbrot.bmp"

# Option: function
# This specifies the test function that generates the fractal image. I'll 
# document this specification line by line inside. Note that the order of
# the options inside 'function' specification is *not* interchangeable; 
# they must always come in this order.
#
# This program generates fractals based on a function f(z, c) where both
# z and c are complex numbers. There are two modes of operation. The first
# is used to generate the Mandelbrot set. In this case, the point in the
# complex plane being tested is the argument c to the function f, and the
# argument z is the iterate. In particular for the Mandelbrot set, 
# f(z, c) = z^2 + c, and z starts with a value of 0 + 0i. 
# If the sequence z_k = f(z_{k-1}, c) remains bounded then the point c is
# included in the fractal.
#
# In the second mode, the point being tested is the z argument, and c takes
# on a constant value. In this case, if the sequence
# z_k = f(z_{k-1}, c) remains bounded, then the point z_0 is 
# in the fractal.
# 
# In reality, to make the image more interesting than black and white we 
# return the number of iterations needed for the iteration at a test point
# to diverge, as defined by some escape tolerance.
function:
{
    "z^2 + c", # The first line should be a string specifying the function
               # that it is iterated as a function of z and c (these are the
               # only two allowed variables). Besides arithmetic operators,
               # the following functions are implemented:
               # sin, cos, tan, asin, acos, atan, sqrt, real, imag, abs, exp.

    max_iterations: 1200, # The maximum iterations to be used when checking a
                          # point. If a point does not escape in less than
                          # max_iterations iterations this number is returned.

    escape_tol: 2.0, # Escape tolerance. If abs(point being iterated) > escape_tol,
                     # the test function breaks and returns current iteration number.
                     # I believe the analytically correct value for the Mandelbrot
                     # set is sqrt(5).

    constant: {0, 0}, # The use of this value is different depending on which point
                      # is being tested. If the test point is c, as is the case
                      # for the Mandelbrot set, this constant value is the initial
                      # value of z. If the test point is z, like for a Julia set,
                      # this constant is the constant value of c.

    point: c # Specifies whether z or c is the point to be tested.
}
